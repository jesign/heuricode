{"version":3,"sources":["userModel.js","codeModel.js","badgeModel.js","problemModel.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjhfile":"models.js","sourcesContent":["myApp.factory('userModel', ['$http' , '$q', function($http, $q){\n\n\treturn {\n\t\tgetPlayerDetails: getPlayerDetails,\n\t\tgetUserId: getUserId,\n\t\tcheckAuth: checkAuth,\n\t\tcheckVacantRoom: checkVacantRoom,\n\t\tgetAllErrorsCount: getAllErrorsCount,\n\t\tgetBattleRecords: getBattleRecords\n\t};\n\n\tfunction checkAuth(){\n\t\treturn $http.get(baseUrl + 'checkAuth');\n\t}\n\t\n\tfunction checkVacantRoom(rooms){\n\t\tvar d = $q.defer();\n\t\tif(rooms.length == 0){\n\t\t\td.reject();\n\t\t}\n\n\t\tfor(var x = 0; x < rooms.length; x ++){\n\t\t\tconsole.log(\"looking for vacant room\");\n\t\t\t// check if vacant room\n\t\t\tif(rooms[x].player2 === 0){\n\t\t\t\t\n\t\t\t\td.resolve({\n\t\t\t\t\troomKey: rooms[x].$id\n\t\t\t\t})\n\t\t\t}\t\t\t\t\n\t\t}\n\t\t\n\t\td.reject();\n\t\treturn d.promise;\n\t}\n\tfunction getUserId(){\t\t\t\n\t\treturn $http ({\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + 'userId',\n\t\t\tmethod: \"POST\"\n\t\t});\n\t}\n\tfunction getPlayerDetails(user_id){\n\t\treturn $http ({\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + 'getPlayerDetails',\n\t\t\tdata: {\n\t\t\t\tuser_id: user_id,\n\t\t\t},\n\t\t\tmethod: \"POST\"\n\t\t})\n\t}\n\n\tfunction getAllErrorsCount(e_id){\n\t\treturn $http.get(baseUrl + 'getAllError/' + e_id);\n\t}\n\n\tfunction getBattleRecords(){\n\t\treturn $http.get(baseUrl + 'getBattleRecords');\n\t}\n\n}]);","myApp.factory('codeModel', ['$http', function($http){\n\t\n\tvar model = {};\n\n\n\tmodel.runCodeModel = function(srcCode){\n\t\tvar lang_id = srcCode.langId;\n\t\tvar codes = srcCode.codes;\n\n\t\t$.ajax({\n\t\t  type: \"POST\",\n\t\t  url: 'http://db4262da.compilers.sphere-engine.com/api/v3/submissions?access_token=00c04ffac4d4ffe13d590b91b70ef3f2',\n\t\t  data: {\n\t\t \t\tsourceCode: codes,\n\t\t \t\tlanguage: lang_id\n\t\t \t},\n\t\t  success: function(result){\n\t\t  \treturn result;\n\t\t  }\n\t\t  \n\t\t});\n\t}\n\n\tmodel.addRound = function(problemCode){\n\t\treturn $http({\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json'\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\t'problemCode' : problemCode\n\t\t\t},\n\t\t\turl: baseUrl + \"round/add\",\n\t\t\tmethod: \"POST\"\n\t\t});\n\t}\n\tmodel.setRound = function(round_id){\n\t\treturn $http({\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json'\t\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\t'round_id' : round_id\n\t\t\t},\n\t\t\turl: baseUrl + \"round/set\",\n\t\t\tmethod: \"POST\"\n\t\t});\t\t\n\t}\n\tmodel.addBattle = function(opp, pcode){\n\t\treturn $http({\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json'\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\t'opponent_id' : opp,\n\t\t\t\t'problemCode' : pcode\n\t\t\t},\n\t\t\turl: baseUrl + 'addBattle',\n\t\t\tmethod: 'POST'\n\t\t});\t\n\t}\n\tmodel.setBattle = function(battle_id,isSolved, isWin){\n\t\treturn $http({\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json'\t\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\t'battle_id' : battle_id,\n\t\t\t\t'isWinner': isWin,\n\t\t\t\t'isSolved': isSolved\n\t\t\t},\n\t\t\turl: baseUrl + \"battleSolved\",\n\t\t\tmethod: \"POST\"\n\t\t});\t\t\n\t}\t\n\n\tmodel.rankUp = function(weakness_id){\n\t\treturn $http({\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json'\t\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\t'weakness_id' : weakness_id\n\t\t\t},\n\t\t\turl: baseUrl + \"rank/up\",\n\t\t\tmethod: \"POST\"\n\t\t});\t\t\t\n\t}\n\tmodel.saveErrors = function(ms, se, pm, ie, modes){\n\t\treturn $http({\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json'\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\tMS: ms,\n\t\t\t\tSE: se, \n\t\t\t\tPM: pm,\n\t\t\t\tIE: ie,\n\t\t\t\tmode: modes\n\t\t\t},\n\t\t\turl: baseUrl + \"saveError\",\n\t\t\tmethod: \"POST\"\n\t\t});\n\t}\t\n\n\tmodel.submissionStatusModel = function(id, token){\n\t\treturn $http({\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\twithSource: true,\n\t\t\t\twithInput: true,\n\t\t\t\twithOutput: true,\n\t\t\t\twithStderr: true,\n\t\t\t\twithCmpinfo: true\n\t\t\t},\n\t\t\turl: 'http://db4262da.compilers.sphere-engine.com/api/v3/submissions/' + id + '?access_token=' + token,\n\t\t\tmethod: \"GET\"\n\t\t}).then(function(result){\n\t\t\treturn result.data;\n\t\t});\n\n\t}\n\tmodel.judgeCode = function(srcCode, pCode){\n\t\treturn $http({\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tsourceCode: srcCode,\n\t\t\t\tproblemCode: pCode\n\t\t\t},\n\t\t\turl: baseUrl + 'judgeCode',\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n\n\n\tmodel.languageModel = function(){\n\t\treturn $http.get('http://db4262da.compilers.sphere-engine.com/api/v3/languages?access_token=00c04ffac4d4ffe13d590b91b70ef3f2');\n\t}\n\t// http://db4262da.compilers.sphere-engine.com/api/v3/languages?access_token=00c04ffac4d4ffe13d590b91b70ef3f2\n\treturn model;\n\n}]);","myApp.factory('badgeModel', ['$http', function($http){\n\t\n\tvar model = {};\n\n\tmodel.getBadges = function(){\n\t\treturn $http.get(baseUrl + 'getBadges');\n\t}\n\tmodel.getBadgeDetails = function(id){\n\t\treturn $http.get(baseUrl + 'getBadgeDetails/' + id);\n\t}\n\tmodel.addBadge = function(id){\n\t\treturn $http({\n\t\t\t\theaders:{\n\t\t\t\t\t'Content-Type' : 'application/json'\n\t\t\t\t},\n\t\t\t\turl: baseUrl + 'badges/add',\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\t'badge_id' : id,\n\t\t\t\t}\n\t\t\t});\n\t}\n\tmodel.countSolved = function(diff, subj){\n\t\treturn $http.get(baseUrl + 'countSolved/' + diff + '/' + subj);\n\t}\n\t// http://db4262da.compilers.sphere-engine.com/api/v3/languages?access_token=00c04ffac4d4ffe13d590b91b70ef3f2\n\treturn model;\n\n}]);","myApp.factory('problemModel', ['$http', function($http){\n\treturn {\n\t\tgetProblem: function(problem_id){\n\t\t\treturn $http.get(baseUrl + 'problem/' + problem_id);\n\t\t},\n\t\tgetProblemFeedBack: function(pCode){\n\t\t\treturn $http.get(baseUrl + 'problem/feedback/' + pCode);\n\t\t},\n\t\tgetProblemDetails: function(id, mode){\n\t\t\treturn $http({\n\t\t\t\theaders:{\n\t\t\t\t\t'Content-Type' : 'application/json'\n\t\t\t\t},\n\t\t\t\turl: baseUrl + 'problem/description',\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\t'problem_code' : id,\n\t\t\t\t\t'mode' : mode\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tgetTestCases: function(problem_id){\n\t\t\treturn $http.get(baseUrl + 'testCases/' + problem_id);\n\t\t},\n\t\tgetTesting: function(){\n\t\t\treturn $http.get(baseUrl + 'test');\n\t\t},\n\t\tgetSubmissionDetails: function(submissionId){\n\t\t\treturn $http.get(baseUrl + 'getSubmissionDetails/' + submissionId);\n\t\t},\n\t\tgetSubmissionId: function(codeData){\n\t\t\treturn $http({ \n\t\t\t\theaders:{\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\turl: baseUrl + 'getSubmissionId',\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\t'problemCode': codeData.problemCode,\n\t\t\t\t\t'compilerId': codeData.compilerId,\n\t\t\t\t\t'source': codeData.source\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tgetWeaknessRank: function(){\n\t\t\treturn $http.get(baseUrl + 'ranks');\n\t\t},\n\t\tgetRandomProblem: function(weakness){\n\t\t\treturn $http({\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\turl: baseUrl + 'randomProblem',\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\t'weakness_id': weakness\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tgetPlayersProblem: function (p1, p2){\n\t\t\treturn $http({\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type' :'application/json'\n\t\t\t\t}, \n\t\t\t\turl: baseUrl + 'getPlayersProblem',\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\tplayer1_id: p1,\n\t\t\t\t\tplayer2_id: p2, \n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tsetWeakness: function(w){\n\t\t\treturn $http({\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type' :'application/json'\n\t\t\t\t},\n\t\t\t\turl: baseUrl + 'setWeakness',\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tdata:{\n\t\t\t\t\tweakness: w\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tcheckHasWeakness: function(){\n\t\t\treturn $http.get(baseUrl + 'hasWeakness');\n\t\t}\n\t}\n}]);"],"sourceRoot":"/source/"}