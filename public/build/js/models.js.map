{"version":3,"sources":["userModel.js","codeModel.js","badgeModel.js","problemModel.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjhfile":"models.js","sourcesContent":["myApp.factory('userModel', ['$http' , '$q', function($http, $q){\r\n\r\n\treturn {\r\n\t\tgetPlayerDetails: getPlayerDetails,\r\n\t\tgetUserId: getUserId,\r\n\t\tcheckAuth: checkAuth,\r\n\t\tcheckVacantRoom: checkVacantRoom,\r\n\t\tgetAllErrorsCount: getAllErrorsCount,\r\n\t\tgetBattleRecords: getBattleRecords\r\n\t};\r\n\r\n\tfunction checkAuth(){\r\n\t\treturn $http.get(baseUrl + 'checkAuth');\r\n\t}\r\n\t\r\n\tfunction checkVacantRoom(rooms){\r\n\t\tvar d = $q.defer();\r\n\t\tif(rooms.length == 0){\r\n\t\t\td.reject();\r\n\t\t}\r\n\r\n\t\tfor(var x = 0; x < rooms.length; x ++){\r\n\t\t\tconsole.log(\"looking for vacant room\");\r\n\t\t\t// check if vacant room\r\n\t\t\tif(rooms[x].player2 === 0){\r\n\t\t\t\t\r\n\t\t\t\td.resolve({\r\n\t\t\t\t\troomKey: rooms[x].$id\r\n\t\t\t\t})\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\td.reject();\r\n\t\treturn d.promise;\r\n\t}\r\n\tfunction getUserId(){\t\t\t\r\n\t\treturn $http ({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t},\r\n\t\t\turl: baseUrl + 'userId',\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\r\n\t}\r\n\tfunction getPlayerDetails(user_id){\r\n\t\treturn $http ({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\turl: baseUrl + 'getPlayerDetails',\r\n\t\t\tdata: {\r\n\t\t\t\tuser_id: user_id,\r\n\t\t\t},\r\n\t\t\tmethod: \"POST\"\r\n\t\t})\r\n\t}\r\n\r\n\tfunction getAllErrorsCount(e_id){\r\n\t\treturn $http.get(baseUrl + 'getAllError/' + e_id);\r\n\t}\r\n\r\n\tfunction getBattleRecords(){\r\n\t\treturn $http.get(baseUrl + 'getBattleRecords');\r\n\t}\r\n\r\n}]);","myApp.factory('codeModel', ['$http', function($http){\r\n\t\r\n\tvar model = {};\r\n\r\n\r\n\tmodel.runCodeModel = function(srcCode){\r\n\t\tvar lang_id = srcCode.langId;\r\n\t\tvar codes = srcCode.codes;\r\n\r\n\t\t$.ajax({\r\n\t\t  type: \"POST\",\r\n\t\t  url: 'http://db4262da.compilers.sphere-engine.com/api/v3/submissions?access_token=00c04ffac4d4ffe13d590b91b70ef3f2',\r\n\t\t  data: {\r\n\t\t \t\tsourceCode: codes,\r\n\t\t \t\tlanguage: lang_id\r\n\t\t \t},\r\n\t\t  success: function(result){\r\n\t\t  \treturn result;\r\n\t\t  }\r\n\t\t  \r\n\t\t});\r\n\t}\r\n\r\n\tmodel.addRound = function(problemCode){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'problemCode' : problemCode\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"round/add\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\r\n\t}\r\n\tmodel.setRound = function(round_id){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\t\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'round_id' : round_id\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"round/set\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\t\t\r\n\t}\r\n\tmodel.addBattle = function(opp, pcode){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'opponent_id' : opp,\r\n\t\t\t\t'problemCode' : pcode\r\n\t\t\t},\r\n\t\t\turl: baseUrl + 'addBattle',\r\n\t\t\tmethod: 'POST'\r\n\t\t});\t\r\n\t}\r\n\tmodel.setBattle = function(battle_id,isSolved, isWin){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\t\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'battle_id' : battle_id,\r\n\t\t\t\t'isWinner': isWin,\r\n\t\t\t\t'isSolved': isSolved\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"battleSolved\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\t\t\r\n\t}\t\r\n\r\n\tmodel.rankUp = function(weakness_id){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\t\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'weakness_id' : weakness_id\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"rank/up\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\t\t\t\r\n\t}\r\n\tmodel.saveErrors = function(ms, se, pm, ie, modes){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\tMS: ms,\r\n\t\t\t\tSE: se, \r\n\t\t\t\tPM: pm,\r\n\t\t\t\tIE: ie,\r\n\t\t\t\tmode: modes\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"saveError\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\r\n\t}\t\r\n\r\n\tmodel.submissionStatusModel = function(id, token){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tparams: {\r\n\t\t\t\twithSource: true,\r\n\t\t\t\twithInput: true,\r\n\t\t\t\twithOutput: true,\r\n\t\t\t\twithStderr: true,\r\n\t\t\t\twithCmpinfo: true\r\n\t\t\t},\r\n\t\t\turl: 'http://db4262da.compilers.sphere-engine.com/api/v3/submissions/' + id + '?access_token=' + token,\r\n\t\t\tmethod: \"GET\"\r\n\t\t}).then(function(result){\r\n\t\t\treturn result.data;\r\n\t\t});\r\n\r\n\t}\r\n\tmodel.judgeCode = function(srcCode, pCode){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tparams: {\r\n\t\t\t\tsourceCode: srcCode,\r\n\t\t\t\tproblemCode: pCode\r\n\t\t\t},\r\n\t\t\turl: baseUrl + 'judgeCode',\r\n\t\t\tmethod: 'POST'\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tmodel.languageModel = function(){\r\n\t\treturn $http.get('http://db4262da.compilers.sphere-engine.com/api/v3/languages?access_token=00c04ffac4d4ffe13d590b91b70ef3f2');\r\n\t}\r\n\t// http://db4262da.compilers.sphere-engine.com/api/v3/languages?access_token=00c04ffac4d4ffe13d590b91b70ef3f2\r\n\treturn model;\r\n\r\n}]);","myApp.factory('badgeModel', ['$http', function($http){\r\n\t\r\n\tvar model = {};\r\n\r\n\tmodel.getBadges = function(){\r\n\t\treturn $http.get(baseUrl + 'getBadges');\r\n\t}\r\n\tmodel.getBadgeDetails = function(id){\r\n\t\treturn $http.get(baseUrl + 'getBadgeDetails/' + id);\r\n\t}\r\n\tmodel.addBadge = function(id){\r\n\t\treturn $http({\r\n\t\t\t\theaders:{\r\n\t\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'badges/add',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t'badge_id' : id,\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\tmodel.countSolved = function(diff, subj){\r\n\t\treturn $http.get(baseUrl + 'countSolved/' + diff + '/' + subj);\r\n\t}\r\n\t// http://db4262da.compilers.sphere-engine.com/api/v3/languages?access_token=00c04ffac4d4ffe13d590b91b70ef3f2\r\n\treturn model;\r\n\r\n}]);","myApp.factory('problemModel', ['$http', function($http){\r\n\treturn {\r\n\t\tgetProblem: function(problem_id){\r\n\t\t\treturn $http.get(baseUrl + 'problem/' + problem_id);\r\n\t\t},\r\n\t\tgetProblemFeedBack: function(pCode){\r\n\t\t\treturn $http.get(baseUrl + 'problem/feedback/' + pCode);\r\n\t\t},\r\n\t\tgetProblemDetails: function(id, mode){\r\n\t\t\treturn $http({\r\n\t\t\t\theaders:{\r\n\t\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'problem/description',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t'problem_code' : id,\r\n\t\t\t\t\t'mode' : mode\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetTestCases: function(problem_id){\r\n\t\t\treturn $http.get(baseUrl + 'testCases/' + problem_id);\r\n\t\t},\r\n\t\tgetTesting: function(){\r\n\t\t\treturn $http.get(baseUrl + 'test');\r\n\t\t},\r\n\t\tgetSubmissionDetails: function(submissionId){\r\n\t\t\treturn $http.get(baseUrl + 'getSubmissionDetails/' + submissionId);\r\n\t\t},\r\n\t\tgetSubmissionId: function(codeData){\r\n\t\t\treturn $http({ \r\n\t\t\t\theaders:{\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'getSubmissionId',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t'problemCode': codeData.problemCode,\r\n\t\t\t\t\t'compilerId': codeData.compilerId,\r\n\t\t\t\t\t'source': codeData.source\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetWeaknessRank: function(){\r\n\t\t\treturn $http.get(baseUrl + 'ranks');\r\n\t\t},\r\n\t\tgetRandomProblem: function(weakness){\r\n\t\t\treturn $http({\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'randomProblem',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t'weakness_id': weakness\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetPlayersProblem: function (p1, p2){\r\n\t\t\treturn $http({\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type' :'application/json'\r\n\t\t\t\t}, \r\n\t\t\t\turl: baseUrl + 'getPlayersProblem',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tplayer1_id: p1,\r\n\t\t\t\t\tplayer2_id: p2, \r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tsetWeakness: function(w){\r\n\t\t\treturn $http({\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type' :'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'setWeakness',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata:{\r\n\t\t\t\t\tweakness: w\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tcheckHasWeakness: function(){\r\n\t\t\treturn $http.get(baseUrl + 'hasWeakness');\r\n\t\t}\r\n\t}\r\n}]);"],"sourceRoot":"/source/"}