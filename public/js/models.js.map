{"version":3,"sources":["userModel.js","codeModel.js","problemModel.js"],"names":[],"mappingsxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"models.js","sourcesContent":["myApp.factory('userModel', ['$http' , '$q', function($http, $q){\r\n\r\n\treturn {\r\n\t\tgetPlayerDetails: getPlayerDetails,\r\n\t\tgetUserId: getUserId,\r\n\t\tcheckAuth: checkAuth,\r\n\t\tgetMatchedUser: getMatchedUser,\r\n\t\tcheckVacantRoom: checkVacantRoom,\r\n\t\tcheckIfMatchingUser: checkIfMatchingUser,\r\n\t\tgetAllErrorsCount: getAllErrorsCount,\r\n\t};\r\n\r\n\tfunction checkAuth(){\r\n\t\treturn $http.get(baseUrl + 'checkAuth');\r\n\t}\r\n\r\n\tfunction checkIfMatchingUser(player1){\r\n\t\treturn $http ({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t},\r\n\t\t\turl: baseUrl + 'checkIfMatch', \r\n\t\t\tdata: {\r\n\t\t\t\tplayer1_id: player1\r\n\t\t\t},\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\r\n\t}\r\n\r\n\tfunction checkVacantRoom(rooms, scs, rcs, arr){\r\n\r\n\t\tvar d = $q.defer();\r\n\r\n\t\tif(rooms.length == 0){\r\n\t\t\td.reject();\r\n\t\t}\r\n\r\n\t\tfor(var x = 0; x < rooms.length; x ++){\r\n\t\t\tconsole.log(\"looking for vacant room\");\r\n\t\t\t// check if vacant room\r\n\t\t\tif(rooms[x].player2 == 0){\r\n\t\t\t\t\r\n\t\t\t\td.resolve({\r\n\t\t\t\t\troomKey: rooms[x].$id\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// /* check if player 1 is a matching user */\r\n\t\t\t\t\r\n\t\t\t\t// var p2_scs = rooms[x].level.scs;\r\n\t\t\t\t// var p2_rcs = rooms[x].level.rcs;\r\n\t\t\t\t// var p2_arr = rooms[x].level.arr;\r\n\r\n\t\t\t\t// if(scs == p2_scs || Math.abs(scs - p2_scs) == 1){\r\n\t\t\t\t// \td.resolve({\r\n\t\t\t\t// \t\troomKey: rooms[x].$id,\r\n\t\t\t\t// \t\tplayer_id: rooms[x].player1,\r\n\t\t\t\t// \t\tsubject: 1,\r\n\t\t\t\t// \t\tlevel: p2_scs\r\n\t\t\t\t// \t});\r\n\t\t\t\t// }\r\n\t\t\t\t// if(rcs == p2_rcs || Math.abs(rcs - p2_rcs) == 1){\r\n\t\t\t\t// \td.resolve({\r\n\t\t\t\t// \t\troomKey: rooms[x].$id,\r\n\t\t\t\t// \t\tsubject: 2,\r\n\t\t\t\t// \t\tlevel: p2_rcs\r\n\t\t\t\t// \t});\r\n\t\t\t\t// }\r\n\t\t\t\t// if(arr == p2_arr || Math.abs(arr - p2_arr) == 1){\r\n\t\t\t\t// \td.resolve({\r\n\t\t\t\t// \t\troomKey: rooms[x].$id,\r\n\t\t\t\t// \t\tsubject: 3,\r\n\t\t\t\t// \t\tlevel: p2_arr\r\n\t\t\t\t// \t});\r\n\t\t\t\t// }\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\td.reject();\r\n\r\n\t\treturn d.promise;\r\n\t}\r\n\tfunction getUserId(){\t\t\t\r\n\t\treturn $http ({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t},\r\n\t\t\turl: baseUrl + 'userId',\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\r\n\t}\r\n\tfunction getMatchedUser(online_users, except_users){\r\n\t\treturn $http ({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\turl: baseUrl + 'findMatch',\r\n\t\t\tdata: {\r\n\t\t\t\tonline_users,\r\n\t\t\t\tusers: online_users,\r\n\t\t\t\texcepts: except_users\r\n\t\t\t},\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\r\n\t}\r\n\tfunction getPlayerDetails(user_id,subj){\r\n\t\treturn $http ({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\turl: baseUrl + 'getPlayerDetails',\r\n\t\t\tdata: {\r\n\t\t\t\tuser_id: user_id,\r\n\t\t\t\tsubject: subj\r\n\t\t\t},\r\n\t\t\tmethod: \"POST\"\r\n\t\t})\r\n\t}\r\n\r\n\tfunction getAllErrorsCount(e_id){\r\n\t\treturn $http.get(baseUrl + 'getAllError/' + e_id);\r\n\t}\r\n\r\n}]);","myApp.factory('codeModel', ['$http', function($http){\r\n\t\r\n\tvar model = {};\r\n\r\n\tmodel.runCodeModel = function(srcCode){\r\n\t\tvar lang_id = srcCode.langId;\r\n\t\tvar codes = srcCode.codes;\r\n\r\n\t\t$.ajax({\r\n\t\t  type: \"POST\",\r\n\t\t  url: 'http://db4262da.compilers.sphere-engine.com/api/v3/submissions?access_token=00c04ffac4d4ffe13d590b91b70ef3f2',\r\n\t\t  data: {\r\n\t\t \t\tsourceCode: codes,\r\n\t\t \t\tlanguage: lang_id\r\n\t\t \t},\r\n\t\t  success: function(result){\r\n\t\t  \treturn result;\r\n\t\t  }\r\n\t\t  \r\n\t\t});\r\n\t};\r\n\r\n\tmodel.addRound = function(problemCode){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'problemCode' : problemCode\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"round/add\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\r\n\t};\r\n\r\n\tmodel.setRound = function(round_id){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\t\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'round_id' : round_id\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"round/set\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\t\t\r\n\t}\r\n\r\n\tmodel.rankUp = function(weakness_id){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\t\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'weakness_id' : weakness_id\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"rank/up\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\t\t\t\r\n\t}\r\n\tmodel.saveErrors = function(ms, se, pm, ie, mode){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\tMS: ms,\r\n\t\t\t\tSE: se, \r\n\t\t\t\tPM: pm,\r\n\t\t\t\tIE: ie,\r\n\t\t\t\tmode: mode\r\n\t\t\t},\r\n\t\t\turl: baseUrl + \"saveError\",\r\n\t\t\tmethod: \"POST\"\r\n\t\t});\r\n\t}\t\r\n\r\n\tmodel.submissionStatusModel = function(id){\r\n\t\treturn $http({\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tparams: {\r\n\t\t\t\twithSource: true,\r\n\t\t\t\twithInput: true,\r\n\t\t\t\twithOutput: true,\r\n\t\t\t\twithStderr: true,\r\n\t\t\t\twithCmpinfo: true\r\n\t\t\t},\r\n\t\t\turl: 'http://db4262da.compilers.sphere-engine.com/api/v3/submissions/' + id + '?access_token=00c04ffac4d4ffe13d590b91b70ef3f2',\r\n\t\t\tmethod: \"GET\"\r\n\t\t}).then(function(result){\r\n\t\t\treturn result.data;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\r\n\tmodel.languageModel = function(){\r\n\t\treturn $http.get('http://db4262da.compilers.sphere-engine.com/api/v3/languages?access_token=00c04ffac4d4ffe13d590b91b70ef3f2');\r\n\t}\r\n\t// http://db4262da.compilers.sphere-engine.com/api/v3/languages?access_token=00c04ffac4d4ffe13d590b91b70ef3f2\r\n\treturn model;\r\n\r\n}]);","myApp.factory('problemModel', ['$http', function($http){\r\n\treturn {\r\n\t\tgetProblem: function(problem_id){\r\n\t\t\treturn $http.get(baseUrl + 'problem/' + problem_id);\r\n\t\t},\r\n\t\tgetProblemDetails: function(id){\r\n\t\t\treturn $http({\r\n\t\t\t\theaders:{\r\n\t\t\t\t\t'Content-Type' : 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'problem/description',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t'problem_code' : id\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetTestCases: function(problem_id){\r\n\t\t\treturn $http.get(baseUrl + 'testCases/' + problem_id);\r\n\t\t},\r\n\t\tgetTesting: function(){\r\n\t\t\treturn $http.get(baseUrl + 'test');\r\n\t\t},\r\n\t\tgetSubmissionDetails: function(submissionId){\r\n\t\t\treturn $http.get(baseUrl + 'getSubmissionDetails/' + submissionId);\r\n\t\t},\r\n\t\tgetSkeletonCode: function(problemCode, languageId){\r\n\t\t\tif(languageId == 11) {\r\n\t\t\t\treturn $http.get(baseUrl + 'problem/sourceCode/C/' + problemCode);\r\n\t\t\t} else if(languageId == 1) {\r\n\t\t\t\treturn $http.get(baseUrl + 'problem/sourceCode/Cpp/' + problemCode);\r\n\t\t\t} else {\r\n\t\t\t\treturn $http.get(baseUrl + 'problem/sourceCode/Java/' + problemCode);\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetSubmissionId: function(codeData){\r\n\t\t\treturn $http({ \r\n\t\t\t\theaders:{\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'getSubmissionId',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t'problemCode': codeData.problemCode,\r\n\t\t\t\t\t'compilerId': codeData.compilerId,\r\n\t\t\t\t\t'source': codeData.source\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetWeaknessRank: function(){\r\n\t\t\treturn $http.get(baseUrl + 'ranks');\r\n\t\t},\r\n\t\tgetRandomProblem: function(weakness){\r\n\t\t\treturn $http({\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'randomProblem',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t'weakness_id': weakness\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetPlayersProblem: function (p1, p2, subj){\r\n\t\t\treturn $http({\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type' :'application/json'\r\n\t\t\t\t}, \r\n\t\t\t\turl: baseUrl + 'getPlayersProblem',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tplayer1_id: p1,\r\n\t\t\t\t\tplayer2_id: p2, \r\n\t\t\t\t\tsubject: subj\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tsetWeakness: function(w){\r\n\t\t\treturn $http({\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type' :'application/json'\r\n\t\t\t\t},\r\n\t\t\t\turl: baseUrl + 'setWeakness',\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tdata:{\r\n\t\t\t\t\tweakness: w\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tcheckHasWeakness: function(){\r\n\t\t\treturn $http.get(baseUrl + 'hasWeakness');\r\n\t\t}\r\n\t}\r\n}]);"],"sourceRoot":"/source/"}